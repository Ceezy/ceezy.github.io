{"meta":{"title":"Ceezy's blog","subtitle":null,"description":null,"author":"Ceezy Chen","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Objective-C property attributes","slug":"Objective-C-property-attributes","date":"2017-03-19T09:59:01.000Z","updated":"2017-03-19T15:24:39.000Z","comments":true,"path":"2017/03/19/Objective-C-property-attributes/","link":"","permalink":"http://yoursite.com/2017/03/19/Objective-C-property-attributes/","excerpt":"","text":"Hi, everyone! After a period of interview, I found that most of the interviewee, with two or three years’ working experience, don’t even know much about property’s attributes. Therefore, it is necessary to tell you the detail about property’s attributes. Atomicityatomic and nonatomic describe the atomicity for an Objective-C property. atomic is the default attribute for atomicity. If you don’t type the atomicity attribute, the complier will automatically generate atomic for you. atomic guaranteed that if you try to read the value of the property, it will return a valid value, not a junk memory. Note: atomic does not guaranteed thread safety. In other words, if you have two thread to manage the value of an atomic property, once you read from it, you don’t know which value will be returned, the value before change or the value after change. atomic will cause more memory consumption than nonatomic. On the flip side, nonatomic does not guaranteed the value’s validity. It may return a junk memory which will cause a crash. Generally speaking, it is recommended to use nonatomic rather than atomic and you need to guaranteed thread safety using thread locks. Accessreadwrite and readonly describe the accessibility of the property. Apparently, readwrite is the default attribute, which allows anyone the write and read this property. Oppositely, anyone else can only read this property when you use readonly. StorageIn MRC, assign, retain and copy describe how the property storage its value. assign is used for primitives (i.e. int, float, double, bool or enum). retain is used for the pointer type property. It will hold the reference to the object and make the object’s reference count plus one. copy is used for those classed conform to the NSCopying protocol (i.e. NSString, NSDictionary, NSData, etc.). If you set a property with copy, it will alloc a memory and point to the content when you initializing the property with an object. So the copied property would not be changed when the object changes. As we all known, ARC brought another two attributes, strong and weak. strong is the same as retain. The only difference is strong is used in ARC and retain is for MRC. weak will reference the object but will not keep the reference. When the object release, weak property will be automatically set to nil, which makes your code safer. Setter and getterAdditionally, Objective-C provides a convenient way for readability and writability for a property. You can use setter= and getter= append a custom method name to assign a specific method as the property’s setter or getter. For example, 1@property (nonatomic, assign, getter=isCounting) BOOL counting; So we can invoke the method “isCounting” to get the value of the property “counting”.","categories":[],"tags":[]},{"title":"Welcome to my blog!","slug":"Welcome-to-my-blog","date":"2017-03-17T03:29:20.000Z","updated":"2017-03-17T03:32:26.000Z","comments":true,"path":"2017/03/17/Welcome-to-my-blog/","link":"","permalink":"http://yoursite.com/2017/03/17/Welcome-to-my-blog/","excerpt":"","text":"Welcome to my blog!Hey! From now on I will write down everything in my technical journey. Hope my blog could help someone in the future.","categories":[],"tags":[]}]}